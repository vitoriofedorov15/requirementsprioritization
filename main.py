import logging
import os
import pandas as pd
import numpy as np

from modules.data_loader import load_data
from modules.fuzzy_methods.fuzzy_topsis import fuzzy_topsis_type2
from modules.fuzzy_methods.fuzzy_qfd import fuzzy_qfd_type2
from modules.fuzzy_methods.fuzzy_delphi import intuitionistic_fuzzy_delphi
from modules.crisp_methods.moscow import moscow_method
from modules.crisp_methods.kano import kano_model
from modules.crisp_methods.topsis import topsis_method
from modules.visualization.plot_results import plot_results
from modules.export import export_results

# ‚úÖ –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
os.makedirs("logs", exist_ok=True)
os.makedirs("data/output", exist_ok=True)

logging.basicConfig(
    filename="logs/project.log",
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
)

def convert_to_dataframe(data, index_label="Requirement ID", value_label="Value"):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ DataFrame –ø–µ—Ä–µ–¥ —ç–∫—Å–ø–æ—Ä—Ç–æ–º."""
    if isinstance(data, pd.DataFrame):
        return data
    elif isinstance(data, dict):
        return pd.DataFrame(list(data.items()), columns=[index_label, value_label])
    elif isinstance(data, np.ndarray):
        if data.ndim == 1:  # –ï—Å–ª–∏ –æ–¥–Ω–æ–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤
            return pd.DataFrame({value_label: data})
        elif data.ndim == 2 and data.shape[1] == 3:  # –ï—Å–ª–∏ —Ç—Ä–µ—Ö–º–µ—Ä–Ω—ã–π Type-2 Fuzzy
            return pd.DataFrame(data, columns=["Min", "Likely", "Max"])
        else:
            raise ValueError("–û—à–∏–±–∫–∞: –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –º–∞—Å—Å–∏–≤–∞ –¥–ª—è DataFrame.")
    elif isinstance(data, list):
        return pd.DataFrame({value_label: data})
    else:
        return pd.DataFrame({value_label: [data]})  # –ï—Å–ª–∏ –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ


def safe_mean(data):
    """–í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –¥–∞–∂–µ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ - —ç—Ç–æ dict –∏–ª–∏ list."""
    if isinstance(data, dict):
        values = list(data.values())
    elif isinstance(data, (list, np.ndarray)):
        values = np.array(data)
    else:
        return 0
    if len(values) == 0:
        return 0
    return np.mean(values)

def main():
    try:
        print("üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ...")
        data = load_data("data/input/input.csv")

        if data is None or data.empty:
            logging.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å input.csv")
            print("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã! –ü—Ä–æ–≤–µ—Ä—å input.csv")
            return

        print("‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        logging.info("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")

        print("üîπ –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑...")
        fuzzy_topsis_res = fuzzy_topsis_type2(data)
        fuzzy_qfd_res = fuzzy_qfd_type2(data)
        fuzzy_delphi_res = intuitionistic_fuzzy_delphi(data)
        moscow_res = moscow_method(data)
        kano_res = kano_model(data)
        topsis_res = topsis_method(data)

        print("‚úÖ –ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω!")
        logging.info("–ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω.")


        print("üîπ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª—ã...")
        export_results(convert_to_dataframe(fuzzy_topsis_res), "data/output/fuzzy_topsis.csv")
        export_results(convert_to_dataframe(fuzzy_qfd_res), "data/output/fuzzy_qfd.csv")
        export_results(convert_to_dataframe(fuzzy_delphi_res), "data/output/fuzzy_delphi.csv")
        export_results(convert_to_dataframe(moscow_res), "data/output/moscow.csv")
        export_results(convert_to_dataframe(topsis_res), "data/output/topsis.csv")

        # –û—Ç–¥–µ–ª—å–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º Kano-–º–æ–¥–µ–ª—å
        for category, df in kano_res.items():
            export_results(df, f"data/output/kano_{category}.csv")

        print("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ `data/output/`!")
        logging.info("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª—ã.")

        print("üîπ –ó–∞–ø—É—Å–∫–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é...")
        plot_results(
            safe_mean(fuzzy_topsis_res),
            safe_mean(fuzzy_qfd_res),
            safe_mean(fuzzy_delphi_res),
            safe_mean(moscow_res),
            safe_mean(kano_res),
            safe_mean(topsis_res),
        )

        logging.info("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print("üéâ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –°–º–æ—Ç—Ä–∏ –≥—Ä–∞—Ñ–∏–∫–∏ –∏ —Ñ–∞–π–ª—ã –≤ `data/output/`.")

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ main.py: {str(e)}")
        print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()
